#Copyright 2015-2016 Capstone Team G
#
#Licensed under the Apache License, Version 2.0 (the "License");
#you may not use this file except in compliance with the License.
#You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
#Unless required by applicable law or agreed to in writing, software
#distributed under the License is distributed on an "AS IS" BASIS,
#WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#See the License for the specific language governing permissions and
#limitations under the License.

import json
import os
import requests
from functools import partial
from logging import getLogger
from typing import Dict, Iterable
from uuid import UUID
from settings.settings import LINTWEB_SETTINGS

#from git import Repo
from lintball.lint_report import LintReport

join = os.path.join

github_repo = 'git@github.com:$owner/$repo'

logger = getLogger('GitHubIntegration')


def github_pull_hook(uuid: UUID, payload: Dict)-> (partial, partial, partial):
    owner = payload['repo']['owner']
    repo = payload['repo']['name']
    pull_request = payload['pull_request']['id']
    path = './$uuid'.format(uuid=uuid)
    comment_id = 0  # this should get generated by posting a comment on the pull request

    partial_functions = (partial(retrieve_files,
                                 uuid=uuid,
                                 owner=owner,
                                 repository=repo,
                                 pull_request_id=pull_request,
                                 path=path,
                                 comment_id=comment_id),

                         partial(ab_files, path=path),

                         partial(process_results,
                                 uuid=uuid,
                                 owner=owner,
                                 repository=repo,
                                 pull_request_id=pull_request))

    return partial_functions


def github_oauth_response(code: str)-> str:
    url = LINTWEB_SETTINGS['github']['OAUTH_URL_POST']

    # Construct outgoing data and a header
    outgoing = {
        'client_id' : LINTWEB_SETTINGS['github']['CLIENT_ID'],
        'client_secret': LINTWEB_SETTINGS['github']['CLIENT_SECRET'],
        'code': code,
        'redirect_url': LINTWEB_SETTINGS['github']['CALLBACK']
    }
    headers = {'Accept': 'application/json'}

    # Post data to github and capture response then parse returned JSON
    request = requests.post(url, data=outgoing, headers=headers)
    payload = json.loads(request.text)
    access_token = payload['access_token']
    scope_given = payload['scope'].split(',')

    scope_needed = LINTWEB_SETTINGS['github']['SCOPES'].split(',')
    for perm in scope_needed:
        if perm not in scope_given:
            return None
    return access_token


def retrieve_files(uuid: UUID, owner: str, repository: str, pull_request_id: str, path: str, comment_id: int):
    logger.debug('retrieving $repo from github for task $uuid'.format(repo=repository, uuid=uuid))
#    repo = Repo.clone_from(url=github_repo.format(owner=owner, repo=repository), to_path=path)
    logger.deubug('retrieval of $repo from github for task $uuid complete'.format(repo=repository, uuid=uuid))
    return None


def ab_files(path: str)-> Iterable(str, str, str):
    return []


def process_results(repository: str, pull_request_id: str, comment_id: int, lint_report: LintReport):
    return None

